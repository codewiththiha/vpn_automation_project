/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
	java
    application
	id("org.openjfx.javafxplugin") version "0.1.0"
}

javafx {
    version = "21"
    modules = listOf("javafx.controls", "javafx.fxml")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

	// Selenium WebDriver
    implementation("org.seleniumhq.selenium:selenium-java:4.26.0")

    // MySQL JDBC Driver
    implementation("mysql:mysql-connector-java:8.0.33")

	// Json
	implementation("org.json:json:20250107")
	
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "vpn_automation.Main"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register<JavaExec>("runGui") {
    group = "application"
    description = "Runs the JavaFX Gui application"
    mainClass.set("vpn_automation.gui.Main2")
    classpath = sourceSets.main.get().runtimeClasspath
    jvmArgs = listOf(
        "--module-path", classpath.asPath,
        "--add-modules", "javafx.controls,javafx.fxml",
        // "--enable-native-access", "javafx.graphics",
        "-Djdk.suppressUnsafeWarnings=true" // Suppress sun.misc.Unsafe warnings
    )
    dependsOn(tasks.classes)
}


tasks.register<JavaExec>("TestDB") {
    group = "application"
    description = "Test Database Connection"
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("vpn_automation.backend.db.ConnectionTest")
    dependsOn(tasks.classes)
}